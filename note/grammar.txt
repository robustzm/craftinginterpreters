program    = declaration* eof ;

declaration = classDecl
            | funDecl
            | varDecl
            | statement ;

statement   = exprStmt
            | forStmt
            | ifStmt
            | returnStmt
            | whileStmt
            | block ;

classDecl   = "class" identifier ( "<" identifier )? "{" function* "}" ;
funDecl     = "fun" function ;
varDecl     = "var" identifier ( "=" expression )? ";" ;

exprStmt    = expression ";" ;
forStmt     = "for" "(" ( varDecl | exprStmt ) expression? ";" expression? ")"
              statement ;
ifStmt      = "if" "(" expression ")" statement ( "else" statement )? ;
returnStmt  = "return" expression? ";" ;
whileStmt   = "while" "(" expression ")" statement ;

block       = "{" declaration* "}" ;
function    = identifier "(" parameters? ")" block ;
parameters  = identifier ( "," identifier )* ;

expression  = assignment ;
assignment  = ( primary "." )? identifier ( "=" assignment )? | or ;
assignment  = or ( "=" assignment )? ;
or          = and ( "or" and )* ;
and         = equality ( "and" equality )* ;
equality    = comparison ( ( "!=" | "==" ) comparison )* ;
comparison  = term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        = factor ( ( "-" | "+" ) factor )* ;
factor      = unary ( ( "%" | "/" | "*" ) unary )* ;
unary       = ( "!" | "-" | "+" ) unary | call ;
call        = primary ( "(" arguments? ")" | "." identifier )* ;
primary     = "true" | "false" | "null" | "this"
            | number | string | identifier | "(" expression ")" ;

arguments   = expression ( "," expression )* ;

number      = digit+ ( "." digit* )? | "." digit+ ;
string      = '"' <any char except '"'>* '"' ;
identifier  = alpha ( alpha | digit )* ;
alpha       = 'a' ... 'z' | 'A' ... 'Z' | '_' ;
digit       = '0' ... '9' ;
eof         = <special token indicating end of input>
