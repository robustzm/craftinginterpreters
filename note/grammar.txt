TODO: super.

program     = declaration* EOF ;

declaration = classDecl
            | funDecl
            | varDecl
            | statement ;

statement   = exprStmt
            | forStmt
            | ifStmt
            | printStmt
            | returnStmt
            | whileStmt
            | block ;

classDecl   = "class" IDENTIFIER ( "<" IDENTIFIER )? "{" function* "}" ;
funDecl     = "fun" function ;
varDecl     = "var" IDENTIFIER ( "=" expression )? ";" ;

exprStmt    = expression ";" ;
forStmt     = "for" "(" ( varDecl | exprStmt ) expression? ";" expression? ")"
              statement ;
ifStmt      = "if" "(" expression ")" statement ( "else" statement )? ;
printStmt   = "print" expression ";" ;
returnStmt  = "return" expression? ";" ;
whileStmt   = "while" "(" expression ")" statement ;

block       = "{" declaration* "}" ;
function    = IDENTIFIER "(" parameters? ")" block ;
parameters  = IDENTIFIER ( "," IDENTIFIER )* ;

expression  = assignment ;
assignment  = ( call "." )? IDENTIFIER "=" assignment
            | or;
or          = and ( "or" and )* ;
and         = equality ( "and" equality )* ;
equality    = comparison ( ( "!=" | "==" ) comparison )* ;
comparison  = term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        = factor ( ( "-" | "+" ) factor )* ;
factor      = unary ( ( "/" | "*" ) unary )* ;
unary       = ( "!" | "-" ) unary | call ;
call        = primary ( "(" arguments? ")" | "." IDENTIFIER )* ;
primary     = "true" | "false" | "null" | "this"
            | NUMBER | STRING | IDENTIFIER | "(" expression ")" ;

arguments   = expression ( "," expression )* ;

lexical:

NUMBER      = DIGIT+ ( "." DIGIT* )? | "." DIGIT+ ;
STRING      = '"' <any char except '"'>* '"' ;
IDENTIFIER  = ALPHA ( ALPHA | DIGIT )* ;
ALPHA       = 'a' ... 'z' | 'A' ... 'Z' | '_' ;
DIGIT       = '0' ... '9' ;
