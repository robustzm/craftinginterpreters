Consider doing a stack-based language in the intro section. That will give
readers some practice thinking in terms of stacks, which will then come in
handy when we get to the bytecode VM at the end.

See: https://leanpub.com/readevalprintlove003/read

Talk about how being concatenative helps compiling. To compile an expression,
we just concatenate compiling the subexpressions.

--

When talking about whether or not strings and numbers can have properties added,
consider what that would mean for equality on them.

--

When talking about early and late binding, use an example like this:

if (false) {
  var a = 1;
  var a = 2; // error here?
}

--

Define "parameter" and "argument" early on.

--

When talking about comparison operators, talk about how allowing comparison on
non-numeric types can be handy for polymorphic sorted collections.

--

Talk about what the stack frame would look like if we allowed variables to be
declared in the middle of an expression.

--

Question: Smalltalk implementations doesn't have to check that the number of
arguments to a method matches the number of parameters it expects. Why not?
